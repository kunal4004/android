schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Conversation @aws_cognito_user_pools @aws_iam {
  createdAt: AWSDateTime!
  id: ID!
  messages(filter: ModelMessageFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMessageConnection @aws_cognito_user_pools @aws_iam
  name: String!
  sessionId: String!
  updatedAt: AWSDateTime!
}

type Message @aws_cognito_user_pools @aws_iam {
  caption: String
  content: String!
  contentType: String
  conversationMessagesId: ID!
  createdAt: AWSDateTime!
  id: ID!
  messageID: String!
  relatedMessageID: String
  sender: SenderType!
  sessionId: String!
  sessionState: SessionStateType!
  timestamp: String
  updatedAt: AWSDateTime!
}

type ModelConversationConnection @aws_cognito_user_pools @aws_iam {
  items: [Conversation]
  nextToken: String
}

type ModelMessageConnection @aws_cognito_user_pools @aws_iam {
  items: [Message]
  nextToken: String
}

type Mutation {
  createConversation(condition: ModelConversationConditionInput, input: CreateConversationInput!): Conversation @aws_cognito_user_pools @aws_iam
  createMessage(condition: ModelMessageConditionInput, input: CreateMessageInput!): Message @aws_cognito_user_pools @aws_iam
  deleteConversation(condition: ModelConversationConditionInput, input: DeleteConversationInput!): Conversation
  deleteMessage(condition: ModelMessageConditionInput, input: DeleteMessageInput!): Message
  sendMessage(content: String!, contentType: String!, email: String, name: String, relatedMessageId: String, sessionId: String!, sessionState: SessionStateType!, sessionType: SessionType, sessionVars: String): SendMessageResponse
  updateConversation(condition: ModelConversationConditionInput, input: UpdateConversationInput!): Conversation
  updateMessage(condition: ModelMessageConditionInput, input: UpdateMessageInput!): Message
}

type Query {
  getConversation(id: ID!): Conversation @aws_cognito_user_pools @aws_iam
  getConversationBySessionId(filter: ModelConversationFilterInput, limit: Int, nextToken: String, sessionId: String!, sortDirection: ModelSortDirection): ModelConversationConnection @aws_cognito_user_pools @aws_iam
  getMessage(id: ID!): Message @aws_cognito_user_pools @aws_iam
  getMessagesByConversationMessagesId(conversationMessagesId: ID!, filter: ModelMessageFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMessageConnection @aws_cognito_user_pools @aws_iam
  listConversations(filter: ModelConversationFilterInput, limit: Int, nextToken: String): ModelConversationConnection @aws_cognito_user_pools @aws_iam
  listMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection @aws_cognito_user_pools @aws_iam
}

type SendMessageResponse {
  body: AWSJSON
  desc: String!
  statusCode: Int!
}

type Subscription {
  onCreateConversation: Conversation @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["createConversation"])
  onCreateMessage: Message @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["createMessage"])
  onDeleteConversation: Conversation @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["deleteConversation"])
  onDeleteMessage: Message @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["deleteMessage"])
  onMessageByConversationId(conversationMessagesId: ID!): Message @aws_subscribe(mutations : ["createMessage"])
  onUpdateConversation: Conversation @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["updateConversation"])
  onUpdateMessage: Message @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["updateMessage"])
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

enum SenderType {
  AGENT
  CUSTOMER
}

enum SessionStateType {
  CONNECT
  DISCONNECT
  ONLINE
  QUEUEING
  TYPING
}

enum SessionType {
  Collections
  CustomerService
  Fraud
}

input CreateConversationInput {
  id: ID
  name: String!
  sessionId: String!
}

input CreateMessageInput {
  caption: String
  content: String!
  contentType: String
  conversationMessagesId: ID!
  id: ID
  messageID: String!
  relatedMessageID: String
  sender: SenderType!
  sessionId: String!
  sessionState: SessionStateType!
  timestamp: String
}

input DeleteConversationInput {
  id: ID
}

input DeleteMessageInput {
  id: ID
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelConversationConditionInput {
  and: [ModelConversationConditionInput]
  name: ModelStringInput
  not: ModelConversationConditionInput
  or: [ModelConversationConditionInput]
  sessionId: ModelStringInput
}

input ModelConversationFilterInput {
  and: [ModelConversationFilterInput]
  id: ModelIDInput
  name: ModelStringInput
  not: ModelConversationFilterInput
  or: [ModelConversationFilterInput]
  sessionId: ModelStringInput
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelMessageConditionInput {
  and: [ModelMessageConditionInput]
  caption: ModelStringInput
  content: ModelStringInput
  contentType: ModelStringInput
  conversationMessagesId: ModelIDInput
  messageID: ModelStringInput
  not: ModelMessageConditionInput
  or: [ModelMessageConditionInput]
  relatedMessageID: ModelStringInput
  sender: ModelSenderTypeInput
  sessionId: ModelStringInput
  sessionState: ModelSessionStateTypeInput
  timestamp: ModelStringInput
}

input ModelMessageFilterInput {
  and: [ModelMessageFilterInput]
  caption: ModelStringInput
  content: ModelStringInput
  contentType: ModelStringInput
  conversationMessagesId: ModelIDInput
  id: ModelIDInput
  messageID: ModelStringInput
  not: ModelMessageFilterInput
  or: [ModelMessageFilterInput]
  relatedMessageID: ModelStringInput
  sender: ModelSenderTypeInput
  sessionId: ModelStringInput
  sessionState: ModelSessionStateTypeInput
  timestamp: ModelStringInput
}

input ModelSenderTypeInput {
  eq: SenderType
  ne: SenderType
}

input ModelSessionStateTypeInput {
  eq: SessionStateType
  ne: SessionStateType
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input UpdateConversationInput {
  id: ID!
  name: String
  sessionId: String
}

input UpdateMessageInput {
  caption: String
  content: String
  contentType: String
  conversationMessagesId: ID
  id: ID!
  messageID: String
  relatedMessageID: String
  sender: SenderType
  sessionId: String
  sessionState: SessionStateType
  timestamp: String
}
