apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-kapt"
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: "androidx.navigation.safeargs"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.huawei.agconnect'
apply plugin: 'dagger.hilt.android.plugin'

android {

    def major = "9"
    def minor = "2"
    def fix = "1"
    def jobNumberProduction = 189
    def jobNumberQa = 605
    def jobNumberFeature = 18

    dataBinding {
        enabled = true
    }
    viewBinding {
        enabled = true
    }

    compileOptions {
        // Support for Java 8 features
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    lintOptions {
        abortOnError false
    }

    def apiKey = "ANDROID_V" + major + "." + minor

    defaultConfig {
        applicationId "com.awfs.coordination"
        manifestPlaceholders = [appLabel: "Woolworths", app_links_host: "www.woolworths.co.za"]
        minSdkVersion 22 //Lollipop 5.1
        targetSdkVersion 30
        compileSdkVersion 30
        multiDexEnabled true
        versionName(major + "." + minor + "." + fix)
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk.abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        dexOptions {
            javaMaxHeapSize "2560M"
        }

        signingConfig null

        buildConfigField("String", "HOST", '"' + System.env.WigroupServer_API_URL + '"')
        buildConfigField("String", "SHA1", '"' + System.env.WigroupServer_API_HASH + '"')
        buildConfigField("String", "ENV", '"' + System.env.Environment + '"')
        resValue "string", "maps_google_api_key", '"' + System.env.MAPS_GOOGLE_API_KEY + '"'
        resValue "string", "maps_huawei_api_key", '"' + System.env.MAPS_HUAWEI_API_KEY + '"'
    }

    def secureProps = new Properties()
    def productionKeystoreProperties = new Properties()
    def isQaRelease = false
    if (System.env.IS_QA_RELEASE != null) {
        isQaRelease = System.env.IS_QA_RELEASE.toBoolean()
    }

    signingConfigs {
        woneappQa {
            keyAlias 'woneapp_qa'
            keyPassword 'woneapp_qa'
            storeFile file('key/woneapp_qa-release-key.keystore')
            storePassword 'woneapp_qa'
        }
    }

    buildTypes {
        // MARK - Debug build types
        debug {
            debuggable true
            packagingOptions  {
                doNotStrip "*/arm64-v8a/libucs-credential.so"
                doNotStrip "*/armeabi-v7a/libucs-credential.so"
                doNotStrip "*/x86/libucs-credential.so"
                doNotStrip "*/x86_64/libucs-credential.so"
            }
            signingConfig signingConfigs.woneappQa
        }

        // MARK - Release build types
        release {
            lintOptions {
                disable 'MissingTranslation'
                checkReleaseBuilds false
                abortOnError false
            }
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-fresco.pro'
            packagingOptions  {
                doNotStrip "*/arm64-v8a/libucs-credential.so"
                doNotStrip "*/armeabi-v7a/libucs-credential.so"
                doNotStrip "*/x86/libucs-credential.so"
                doNotStrip "*/x86_64/libucs-credential.so"
            }
        }
    }

    // Multiple flavor dimensions wasn't used because AppCenter doesn't support it
    // Reference: https://github.com/microsoft/appcenter/issues/32
    // Once AppCenter supports it, we'll be able to
    // use 'google' and 'huawei' flavors with dimension 'provider'
    // and, 'qa' and 'production' flavors with dimension 'environment'
    // with flavorDimensions = 'provider', 'environment'
    flavorDimensions 'default'
    productFlavors {
        googleQa {
            if (file("../secure.properties").exists()) {
                file("../secure.properties")?.withInputStream { secureProps.load(it) }

                buildConfigField("String", "HOST", '"' + secureProps['URL_QA_' + apiKey] + '"')
                buildConfigField("String", "SHA1", '"' + secureProps['HASH_QA_' + apiKey] + '"')
                resValue "string", "maps_google_api_key", (secureProps["MAPS_GOOGLE_API_KEY"] ?: "Google Maps API Key")
                resValue "string", "maps_huawei_api_key", (secureProps["MAPS_HUAWEI_API_KEY"] ?: "Huawei Maps API Key")

                signingConfig signingConfigs.woneappQa
            }

            applicationIdSuffix ".qa"
            versionCode isQaRelease ? jobNumberQa : jobNumberFeature
            manifestPlaceholders = [appLabel: "Woolworths Q"]
            manifestPlaceholders = [app_links_host: "www-win-qa.woolworths.co.za"]
            buildConfigField("String", "ENV", '"QA"')
        }

        googleProduction {
            if (file("../secure.properties").exists()) {
                file("../secure.properties")?.withInputStream { secureProps.load(it) }

                buildConfigField("String", "HOST", '"' + secureProps['URL_PROD_' + apiKey] + '"')
                buildConfigField("String", "SHA1", '"' + secureProps['HASH_PROD_' + apiKey] + '"')
                resValue "string", "maps_google_api_key", (secureProps["MAPS_GOOGLE_API_KEY"] ?: "Google Maps API Key")
                resValue "string", "maps_huawei_api_key", (secureProps["MAPS_HUAWEI_API_KEY"] ?: "Huawei Maps API Key")
            }

            if (file("../ProductionKeystore.properties").exists()) {
                file("../ProductionKeystore.properties").withInputStream { productionKeystoreProperties.load(it) }

                signingConfigs {
                    woolworths {
                        keyAlias productionKeystoreProperties['keyAlias']
                        keyPassword productionKeystoreProperties['keyPassword']
                        storeFile file(productionKeystoreProperties['storeFile'])
                        storePassword productionKeystoreProperties['storePassword']
                    }
                }

                signingConfig signingConfigs.woolworths
            }

            versionCode jobNumberProduction
            buildConfigField("String", "ENV", '""')
        }

        huaweiQa {
            if (file("../secure.properties").exists()) {
                file("../secure.properties")?.withInputStream { secureProps.load(it) }

                buildConfigField("String", "HOST", '"' + secureProps['URL_QA_' + apiKey] + '"')
                buildConfigField("String", "SHA1", '"' + secureProps['HASH_QA_' + apiKey] + '"')
                resValue "string", "maps_google_api_key", (secureProps["MAPS_GOOGLE_API_KEY"] ?: "Google Maps API Key")
                resValue "string", "maps_huawei_api_key", (secureProps["MAPS_HUAWEI_API_KEY"] ?: "Huawei Maps API Key")

                signingConfig signingConfigs.woneappQa
            }

            applicationIdSuffix ".qa"
            versionCode isQaRelease ? jobNumberQa : jobNumberFeature
            manifestPlaceholders = [appLabel: "Woolworths Q"]
            manifestPlaceholders = [app_links_host: "www-win-qa.woolworths.co.za"]
            buildConfigField("String", "ENV", '"QA"')
        }

        huaweiProduction {
            if (file("../secure.properties").exists()) {
                file("../secure.properties")?.withInputStream { secureProps.load(it) }

                buildConfigField("String", "HOST", '"' + secureProps['URL_PROD_' + apiKey] + '"')
                buildConfigField("String", "SHA1", '"' + secureProps['HASH_PROD_' + apiKey] + '"')
                resValue "string", "maps_google_api_key", (secureProps["MAPS_GOOGLE_API_KEY"] ?: "Google Maps API Key")
                resValue "string", "maps_huawei_api_key", (secureProps["MAPS_HUAWEI_API_KEY"] ?: "Huawei Maps API Key")
            }

            if (file("../ProductionKeystore.properties").exists()) {
                file("../ProductionKeystore.properties").withInputStream { productionKeystoreProperties.load(it) }

                signingConfigs {
                    woolworths {
                        keyAlias productionKeystoreProperties['keyAlias']
                        keyPassword productionKeystoreProperties['keyPassword']
                        storeFile file(productionKeystoreProperties['storeFile'])
                        storePassword productionKeystoreProperties['storePassword']
                    }
                }

                signingConfig signingConfigs.woolworths
            }

            versionCode jobNumberProduction
            buildConfigField("String", "ENV", '""')
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'com.google.android.gms:play-services-gcm:17.0.0'
    implementation 'com.google.android.gms:play-services-analytics:17.0.0'

    //noinspection GradleCompatible
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.annotation:annotation:1.2.0'

    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.appcompat:appcompat:1.3.0-rc01'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.facebook.fresco:fresco:2.0.0'
    implementation 'com.facebook.fresco:animated-gif:2.0.0'
    implementation 'com.facebook.android:facebook-android-sdk:13.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.19'

    implementation(name: 'utils-1.1.8', ext: 'aar')
    implementation(name: 'Logger-1', ext: 'aar')

    //pf sdk
    implementation(name: 'PerfectLibCore', ext: 'aar')
    implementation(name: 'PerfectLibMakeup', ext: 'aar')
    implementation(name: 'PerfectLibProductHandler', ext: 'aar')

    implementation 'io.jsonwebtoken:jjwt:0.9.0'
    implementation 'uk.co.chrisjenx:calligraphy:2.2.0'
    implementation 'me.leolin:ShortcutBadger:1.1.22@aar'
    implementation 'com.daimajia.swipelayout:library:1.2.0'
    implementation 'com.github.barteksc:android-pdf-viewer:3.2.0-beta.1'
    api 'com.google.zxing:core:3.3.3'

    api 'com.google.zxing:android-core:3.3.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0'
    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.3.1'
    implementation 'me.relex:circleindicator:2.1.0@aar'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.google.code.gson:gson:2.8.8'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.7.1'
    implementation "com.github.skydoves:balloon:1.0.4"
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'com.github.deano2390:MaterialShowcaseView:1.2.0'
    implementation 'com.daasuu:BubbleLayout:1.2.0'

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:28.4.0')
    implementation 'io.grpc:grpc-okhttp:1.32.2'
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation 'com.google.firebase:firebase-core'
    implementation 'com.google.firebase:firebase-config-ktx'
    implementation 'com.google.firebase:firebase-invites:17.0.0'
    implementation 'com.google.firebase:firebase-perf-ktx'
    implementation 'com.google.firebase:firebase-inappmessaging-display-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    implementation 'com.android.volley:volley:1.2.0'
    implementation "com.google.android.gms:play-services-auth-api-phone:17.5.0"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.5"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.5"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.6'
    implementation 'com.facebook.shimmer:shimmer:0.5.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.3.6'
    implementation 'com.google.android.libraries.places:places:2.4.0'
    implementation 'com.google.android.gms:play-services-places:17.0.0'

    // Amplify core dependency
    implementation 'com.amplifyframework:aws-api:1.3.2'

    // Only specify modules that provide functionality your app will use
    implementation 'com.amplifyframework:aws-auth-cognito:1.3.2'
    implementation 'com.amplifyframework:core:1.3.2'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'com.google.android.play:core:1.10.0'

    // Power Mockito
    testImplementation "org.powermock:powermock-api-mockito2:2.0.2"
    testImplementation "org.powermock:powermock-module-junit4:2.0.2"

    // Scalable size unit
    implementation 'com.intuit.ssp:ssp-android:1.0.5'
    implementation 'com.intuit.sdp:sdp-android:1.0.5'

    testImplementation 'junit:junit:4.13'
    testImplementation "org.mockito:mockito-core:3.4.6"
    testImplementation "org.mockito:mockito-inline:2.21.0"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testImplementation 'android.arch.core:core-testing:1.1.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:rules:1.4.0-alpha04'

    // UI testing with Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0-alpha04'

    // Data store
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // Hilt DI
    implementation "com.google.dagger:hilt-android:2.38.1"
    kapt "com.google.dagger:hilt-android-compiler:2.37"
    implementation 'com.google.maps:google-maps-services:2.0.0'


    // Huawei
    huaweiQaImplementation 'com.huawei.hms:location:6.4.0.300'
    huaweiProductionImplementation 'com.huawei.hms:location:6.4.0.300'
    huaweiQaImplementation 'com.huawei.hms:maps:6.3.1.300'
    huaweiProductionImplementation 'com.huawei.hms:maps:6.3.1.300'
}

apply plugin: 'com.google.gms.google-services'

apply plugin: 'kotlin-android-extensions'
