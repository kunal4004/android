apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-kapt"
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'io.fabric'

android {

    def major = "5"
    def minor = "17"
    def fix = "0"

    def jobNumber = 349
    def isAppCenter = System.getenv("IS_APP_CENTER").asBoolean()

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "default"

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig null
            // Set to null to override default debug keystore and defer to the product flavor.
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-fresco.pro'
        }
    }

    defaultConfig {
        minSdkVersion 19 //kitkat 4.4
        targetSdkVersion 28
        compileSdkVersion 28
        multiDexEnabled true
        versionName(major + "." + minor + "." + fix)
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        versionCode jobNumber
        ndk.abiFilters 'armeabi-v7a','arm64-v8a','x86','x86_64'
        dexOptions {
            javaMaxHeapSize "2560M"
        }
    }

    // configs for MS App Center goes here...
    // MS App Center doesn't currently support productFlavors, only supports release/debug.
    if (isAppCenter) {

        def appId = "com.awfs.coordination"
        def host = System.getenv("WigroupServer_API_URL").toString()
        def hash = System.getenv("WigroupServer_API_HASH").toString()

        def env = ""

        if (host.contains("-qa")){
            appId = "com.awfs.coordination.qa"
            env = "QA"
        }else{
            //assume prod
            jobNumber = 115
        }

        defaultConfig {
            applicationId appId
            versionCode jobNumber
            buildConfigField("String", "HOST", '"' + host + '"')
            buildConfigField("String", "SHA1", '"' + hash + '"')
            buildConfigField("String", "ENV", '"' + env + '"')
        }
    }
    else {

        signingConfigs {
            woneappDev {
                keyAlias 'woneapp_dev'
                keyPassword 'woneapp_dev'
                storeFile file('key/woneapp_dev-release-key.keystore')
                storePassword 'woneapp_dev'
            }
            woneappQa {
                keyAlias 'woneapp_qa'
                keyPassword 'woneapp_qa'
                storeFile file('key/woneapp_qa-release-key.keystore')
                storePassword 'woneapp_qa'
            }
            woneappStaging {
                keyAlias 'woneapp_staging'
                keyPassword 'woneapp_staging'
                storeFile file('key/woneapp_staging-release-key.keystore')
                storePassword 'woneapp_staging'
            }
        }

        def apiKey = "ANDROID_V" + major + "." + minor
        def props = new Properties()
        file("WigroupServices.properties").withInputStream { props.load(it) }

        productFlavors {
            qa {
                applicationId "com.awfs.coordination.qa"
                buildConfigField("String", "HOST", '"' +  props.getProperty("URL_QA_" + apiKey) + '"')
                buildConfigField("String", "SHA1", '"' +  props.getProperty("HASH_QA_" + apiKey) + '"')
                buildConfigField("String", "ENV", '"QA"')
                signingConfig signingConfigs.woneappQa
            }

            production {
                applicationId "com.awfs.coordination"
                buildConfigField("String", "HOST", '"' +  props.getProperty("URL_PROD_" + apiKey) + '"')
                buildConfigField("String", "SHA1", '"' +  props.getProperty("HASH_PROD_" + apiKey) + '"')
                buildConfigField("String", "ENV", '""')
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation 'com.google.android.gms:play-services-gcm:17.0.0'
    implementation 'com.google.android.gms:play-services-tagmanager:17.0.0'
    implementation 'com.google.android.gms:play-services-analytics:17.0.0'
    implementation 'com.google.firebase:firebase-messaging:19.0.1'
    implementation 'com.google.firebase:firebase-core:17.0.0'
    implementation 'com.google.firebase:firebase-config:18.0.0'
    implementation 'com.google.firebase:firebase-dynamic-links:18.0.0'
    implementation 'com.google.firebase:firebase-invites:17.0.0'
    implementation 'com.google.firebase:firebase-perf:18.0.1'

    implementation 'com.google.android:flexbox:1.1.0'
    //noinspection GradleCompatible
    implementation 'androidx.viewpager2:viewpager2:1.0.0-beta03'
    implementation 'com.google.android.material:material:1.1.0-alpha09'
    implementation 'androidx.vectordrawable:vectordrawable:1.0.1'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'


    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.facebook.fresco:fresco:2.0.0'
    implementation 'com.facebook.fresco:animated-gif:2.0.0'
    implementation 'com.facebook.android:facebook-android-sdk:5.1.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'

    implementation(name: 'utils-1.1.8', ext: 'aar')
    implementation(name: 'Logger-1', ext: 'aar')

    implementation 'io.jsonwebtoken:jjwt:0.7.0'
    implementation 'uk.co.chrisjenx:calligraphy:2.2.0'
    implementation 'me.leolin:ShortcutBadger:1.1.22@aar'
    implementation 'com.daimajia.swipelayout:library:1.2.0'
    implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'
    api 'com.google.zxing:core:3.3.3'

    api 'com.google.zxing:android-core:3.3.0'
    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.0.0'
    implementation 'me.relex:circleindicator:2.1.0@aar'

    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.okhttp3:okhttp:3.12.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation "com.github.skydoves:balloon:1.0.4"
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'

    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    implementation 'com.github.deano2390:MaterialShowcaseView:1.2.0'
    implementation 'com.daasuu:BubbleLayout:1.2.0'

    implementation 'com.android.volley:volley:1.1.1'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.25.0'
    testImplementation 'org.powermock:powermock-core:1.7.0RC2'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.0RC2'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.0RC2'

    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    // Optional -- Hamcrest library
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    // Optional -- UI testing with Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    // Optional -- UI testing with UI Automator
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation('com.microsoft.appcenter:espresso-test-extension:1.3')
}

apply plugin: 'com.google.gms.google-services'

apply plugin: 'kotlin-android-extensions'
